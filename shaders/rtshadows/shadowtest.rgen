#version 460
#extension GL_NV_ray_tracing : require

layout(set = 0, binding = 0) uniform accelerationStructureNV topLevelAS;
layout(set = 0, binding = 1, rgba32ui) uniform uimage2D image;
layout(set = 0, binding = 2) uniform sampler2D gbufferPosSampler;

layout(location = 0) rayPayloadNV int hitValue;


#include "light.glsl"

void main() 
{
    const vec2 pixelCenter = vec2(gl_LaunchIDNV.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeNV.xy);

    // is this even needed
    const vec3 pos = texture(gbufferPosSampler, inUV).xyz;
    vec3 origin = pos;

    uint rayFlags = gl_RayFlagsOpaqueNV;
    uint cullMask = 0xff;
    float tmin = 0.001;
    float tmax = 100000.0;
    
    hitValue = 0;
    uint dirBitfield = 0U;
    for(int i = 0; i < dirLights.length(); i++)
    {
        DirectionalLight currentLight = dirLights[i];
        vec3 direction = -currentLight.direction;
        traceNV(topLevelAS, rayFlags, cullMask,
            0 /*sbtRecordOffset*/, 0 /*sbtRecordStride*/, 0 /*missIndex*/,
            origin, tmin, direction, tmax,
            0 /*payload*/ // X here is location = X of the payload
        );

        // todo only 32 light sources supported
        if(hitValue == 1)
        {
            dirBitfield |= 1 << i;
        }

        imageStore(image, ivec2(gl_LaunchIDNV.xy), uvec4(dirBitfield, 0U, 0U, 0U));
    }



}
