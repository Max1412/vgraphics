#version 460
#extension GL_NV_ray_tracing : require

layout(location = 0) rayPayloadNV uint hitValue;

layout(set = 0, binding = 0) uniform accelerationStructureNV topLevelAS;
layout(set = 0, binding = 1) uniform sampler2D gbufferPosSampler;
layout(set = 0, binding = 2, rgba32ui) uniform uimage2D randTex;

struct RTperFrameInfo
{
    int frameSampleCount;
};

layout(set = 0, binding = 3) readonly buffer rtPerFrameBuffer
{
    RTperFrameInfo perFrameInfo;
};

layout(set = 2, binding = 0, r32f) uniform image2DArray softShadowDirectionalImage;
layout(set = 2, binding = 1, r32f) uniform image2DArray softShadowPointImage;
layout(set = 2, binding = 2, r32f) uniform image2DArray softShadowSpotImage;




#include "light.glsl"
#include "random.glsl"

const float PI = 3.1415926535;

float mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}
vec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}
vec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}

float noise(vec3 p){
    vec3 a = floor(p);
    vec3 d = p - a;
    d = d * d * (3.0 - 2.0 * d);

    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);
    vec4 k1 = perm(b.xyxy);
    vec4 k2 = perm(k1.xyxy + b.zzww);

    vec4 c = k2 + a.zzzz;
    vec4 k3 = perm(c);
    vec4 k4 = perm(c + 1.0);

    vec4 o1 = fract(k3 * (1.0 / 41.0));
    vec4 o2 = fract(k4 * (1.0 / 41.0));

    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);
    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);

    return o4.y * d.y + o4.x * (1.0 - d.y);
}

vec3 generatePointOnSphericalLight(in vec3 position, in float radius)
{
    float theta = rand() * 2.0f * PI;
    float u = (rand() * 2.0f) - 1.0f;
    float x = sqrt(1-(u*u)) * cos(theta);
    float y = sqrt(1-(u*u)) * sin(theta);
    float z = u;
    return position + (radius * vec3(x, y, z));
}

vec3 generatePointOnDiskLight(in vec3 position, in float radius, in vec3 normal)
{
    float r = rand();
    float theta = rand() * 2.0f * PI;
    float x = sqrt(r) * cos(theta);
    float y = sqrt(r) * sin(theta);

    vec3 up = vec3(0, 1, 0);

    // check if up == normal
    if(dot(normal, up) == 1.0f) up = vec3(1, 0, 0);

    vec3 a = cross(normal, up);
    vec3 b = cross(a, normal);

    return position + radius * a * x + radius * b * y;
}

void main() 
{
    const vec2 pixelCenter = vec2(gl_LaunchIDNV.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeNV.xy);

    randomInit(ivec2(gl_LaunchIDNV.xy));

    vec3 origin = texture(gbufferPosSampler, inUV).xyz;

    uint rayFlags = gl_RayFlagsOpaqueNV;
    uint cullMask = 0xff;
    float tmin = 0.001;
    float tmax = 100000.0;
    
    float InvSampleCount = 1.0f / (perFrameInfo.frameSampleCount + 1.0f);

    for(int i = 0; i < dirLights.length(); i++)
    {
        float dirShadowValue = 0.0f;

        DirectionalLight currentLight = dirLights[i];

        for(int j = 0; j < currentLight.numShadowSamples; j++)
        {            
            //todo jitter direction better. this converges really slowly
            vec3 direction = normalize(-(currentLight.direction + 0.0025 * vec3(rand(), rand(), rand())));


            traceNV(topLevelAS, rayFlags, cullMask,
                0 /*sbtRecordOffset*/, 0 /*sbtRecordStride*/, 0 /*missIndex*/,
                origin, tmin, direction, tmax,
                0 /*payload*/ // X here is location = X of the payload
            );

            dirShadowValue += hitValue;
        }
        dirShadowValue /= float(currentLight.numShadowSamples);

        // save incrementally
        float oldValue = imageLoad(softShadowDirectionalImage, ivec3(gl_LaunchIDNV.xy, i)).x;
        dirShadowValue = (perFrameInfo.frameSampleCount * InvSampleCount) * oldValue + InvSampleCount * dirShadowValue;
        imageStore(softShadowDirectionalImage, ivec3(gl_LaunchIDNV.xy, i), vec4(dirShadowValue));

    }

    for(int i = 0; i < pointLights.length(); i++)
    {
        float pointShadowValue = 0.0f;

        PointLight currentLight = pointLights[i];

        //TODO tmax should also not be greater than the "radius of the influence sphere" of the point light
        for(int j = 0; j < currentLight.numShadowSamples; j++)
        {            
            vec3 pointOnLight = generatePointOnSphericalLight(currentLight.position, currentLight.radius);
            tmax = length(pointOnLight - origin);

            vec3 direction = normalize(pointOnLight - origin);

            //TODO nicht tracen wenn außerhalb von "einflussradius"!!

            traceNV(topLevelAS, rayFlags, cullMask,
                0 /*sbtRecordOffset*/, 0 /*sbtRecordStride*/, 0 /*missIndex*/,
                origin, tmin, direction, tmax,
                0 /*payload*/ // X here is location = X of the payload
            );

            pointShadowValue += hitValue;
        }
        pointShadowValue /= float(currentLight.numShadowSamples);

        // save incrementally
        float oldValue = imageLoad(softShadowPointImage, ivec3(gl_LaunchIDNV.xy, i)).x;
        pointShadowValue = (perFrameInfo.frameSampleCount * InvSampleCount) * oldValue + InvSampleCount * pointShadowValue;
        imageStore(softShadowPointImage, ivec3(gl_LaunchIDNV.xy, i), vec4(pointShadowValue));

    }

    for(int i = 0; i < spotLights.length(); i++)
    {
        float spotShadowValue = 0.0f;

        SpotLight currentLight = spotLights[i];

        for(int j = 0; j < currentLight.numShadowSamples; j++)
        {            
            vec3 pointOnLight = generatePointOnDiskLight(currentLight.position, currentLight.radius, normalize(currentLight.direction));
            tmax = length(pointOnLight - origin);

            vec3 direction = normalize(pointOnLight - origin);

            //TODO nicht tracen wenn außerhalb von outercutoff!!

            traceNV(topLevelAS, rayFlags, cullMask,
                0 /*sbtRecordOffset*/, 0 /*sbtRecordStride*/, 0 /*missIndex*/,
                origin, tmin, direction, tmax,
                0 /*payload*/ // X here is location = X of the payload
            );

            spotShadowValue += hitValue;
        }
        spotShadowValue /= float(currentLight.numShadowSamples);

        // save incrementally
        float oldValue = imageLoad(softShadowSpotImage, ivec3(gl_LaunchIDNV.xy, i)).x;
        spotShadowValue = (perFrameInfo.frameSampleCount * InvSampleCount) * oldValue + InvSampleCount * spotShadowValue;
        imageStore(softShadowSpotImage, ivec3(gl_LaunchIDNV.xy, i), vec4(spotShadowValue));
    }



    randomFinish(ivec2(gl_LaunchIDNV.xy));
}